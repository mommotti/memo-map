{"version":3,"sources":["API.js","components/LogEntryForm.jsx","App.js","index.js"],"names":["API_URL","window","location","hostname","listLogEntries","a","fetch","response","json","createLogEntry","entry","apiKey","method","headers","body","JSON","stringify","get","includes","text","message","ok","error","Error","deleteLogEntry","id","then","res","console","log","LogEntryForm","onClose","useState","loading","setLoading","setError","useForm","handleSubmit","register","onSubmit","data","latitude","longitude","autocomplete","className","htmlFor","type","name","required","ref","rows","disabled","App","logEntries","setLogEntries","showPopup","setShowPopup","addEntryLocation","setAddEntryLocation","width","height","zoom","viewport","setViewport","getEntries","useEffect","mapStyle","mapboxApiAccessToken","process","onViewportChange","onDblClick","event","lngLat","map","Fragment","key","_id","onClick","viewBox","fill","strokeWidth","strokeLinecap","strokeLinejoin","d","cx","cy","r","closeButton","closeOnClick","dynamicPosition","anchor","title","comments","Date","visitDate","toLocaleDateString","image","src","alt","ReactDOM","render","document","getElementById"],"mappings":"2PAAMA,EAAuC,cAA7BC,OAAOC,SAASC,SAA2B,wBAA0B,oCAE9E,SAAeC,IAAtB,+B,4CAAO,4BAAAC,EAAA,sEACoBC,MAAM,GAAD,OAAIN,EAAJ,cADzB,cACGO,EADH,yBAEIA,EAASC,QAFb,4C,sBAKA,SAAeC,EAAtB,kC,4CAAO,WAA8BC,GAA9B,uBAAAL,EAAA,6DACGM,EAASD,EAAMC,cACdD,EAAMC,OAFV,SAGoBL,MAAM,GAAD,OAAIN,EAAJ,aAAwB,CAChDY,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,YAAaF,GAEjBG,KAAMC,KAAKC,UAAUN,KATtB,YAGGH,EAHH,QAYUM,QAAQI,IAAI,gBAAgBC,SAAS,aAZ/C,iCAauBX,EAASY,OAbhC,OAaOC,EAbP,OAcCZ,EAAO,CACHY,WAfL,yCAkBcb,EAASC,OAlBvB,QAkBCA,EAlBD,mBAoBCD,EAASc,GApBV,0CAqBQb,GArBR,cAuBGc,EAAQ,IAAIC,MAAMf,EAAKY,UACvBb,SAAWC,EACXc,EAzBH,6C,sBA4BA,SAAeE,EAAtB,kC,4CAAO,WAA8BC,GAA9B,SAAApB,EAAA,sDACHC,MAAM,GAAD,OAAIN,EAAJ,qBAAwByB,GAAM,CAC/Bb,OAAQ,WAEPc,MAAK,SAAAC,GAAG,OAAIA,EAAIR,UAChBO,MAAK,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAL1B,4C,kCCSQG,EAvCM,SAAC,GAA2B,IAAzB5B,EAAwB,EAAxBA,SAAU6B,EAAc,EAAdA,QAAc,EACdC,oBAAS,GADK,mBACrCC,EADqC,KAC5BC,EAD4B,OAElBF,mBAAS,IAFS,mBAErCV,EAFqC,KAE9Ba,EAF8B,OAGTC,cAA3BC,EAHoC,EAGpCA,aAAcC,EAHsB,EAGtBA,SAEhBC,EAAQ,uCAAG,WAAOC,GAAP,SAAAnC,EAAA,sEAET6B,GAAW,GACXM,EAAKC,SAAWvC,EAASuC,SACzBD,EAAKE,UAAYxC,EAASwC,UAJjB,SAKHjC,EAAe+B,GALZ,OAMTT,IANS,gDAQTH,QAAQN,MAAR,MACAa,EAAS,KAAMf,SACfc,GAAW,GAVF,yDAAH,sDAcd,OACI,0BAAMS,aAAa,MAAMJ,SAAUF,EAAaE,GAAWK,UAAU,cAChEtB,EAAQ,wBAAIsB,UAAU,SAAStB,GAAc,KAC9C,2BAAOuB,QAAQ,UAAf,WACA,2BAAOC,KAAK,WAAWC,KAAK,SAASC,UAAQ,EAACC,IAAKX,IACnD,2BAAOO,QAAQ,SAAf,SACA,2BAAOE,KAAK,QAAQC,UAAQ,EAACC,IAAKX,IAClC,2BAAOO,QAAQ,YAAf,YACA,8BAAUE,KAAK,WAAWG,KAAM,EAAGD,IAAKX,IACxC,2BAAOO,QAAQ,eAAf,eACA,2BAAOE,KAAK,cAAcE,IAAKX,IAC/B,2BAAOO,QAAQ,SAAf,SAA6B,yCAC7B,2BAAOE,KAAK,QAAQE,IAAKX,IACzB,2BAAOO,QAAQ,aAAf,cACA,2BAAOE,KAAK,YAAYD,KAAK,OAAOG,IAAKX,EAAUU,UAAQ,IAC3D,4BAAQG,SAAUlB,GAAUA,EAAU,aAAe,gBC6GlDmB,EA/IH,WAAO,IAAD,EAEoBpB,mBAAS,IAF7B,mBAETqB,EAFS,KAEGC,EAFH,OAGkBtB,mBAAS,IAH3B,mBAGTuB,EAHS,KAGEC,EAHF,OAIgCxB,mBAAS,MAJzC,mBAITyB,EAJS,KAISC,EAJT,OAKgB1B,mBAAS,CACvC2B,MAAO,QACPC,OAAQ,QACRnB,SAAU,MACVC,WAAY,OACZmB,KAAM,IAVQ,mBAKTC,EALS,KAKCC,EALD,KAaVC,EAAU,uCAAG,4BAAA3D,EAAA,sEACQD,IADR,OACXiD,EADW,OAEjBC,EAAcD,GAFG,2CAAH,qDAKhBY,qBAAU,WACR,sBAAC,sBAAA5D,EAAA,sDACC2D,IADD,0CAAD,KAGC,IAUH,OACE,kBAAC,IAAD,iBACMF,EADN,CAEEI,SAAS,kCACTC,qBAAsBC,6FACtBC,iBAAkBN,EAClBO,WAduB,SAACC,GAAW,IAAD,cACNA,EAAMC,OADA,GAC7B9B,EAD6B,KAClBD,EADkB,KAEpCiB,EAAoB,CAClBjB,WACAC,iBAaEW,EAAWoB,KAAI,SAAA/D,GAAK,OAClB,kBAAC,IAAMgE,SAAP,CAAgBC,IAAKjE,EAAMkE,KACzB,kBAAC,IAAD,CACED,IAAKjE,EAAMkE,IACXnC,SAAU/B,EAAM+B,SAChBC,UAAWhC,EAAMgC,WAEjB,yBACEmC,QAAS,kBAAMrB,EAAa,eACzB9C,EAAMkE,KAAM,MAGf,yBAAKhC,UAAU,aACbe,MAAM,KACNC,OAAO,KACPkB,QAAQ,YACRC,KAAK,OACLC,YAAY,MACZC,cAAc,QACdC,eAAe,SAEf,0BAAMC,EAAE,mDAAwD,4BAAQC,GAAG,KAAKC,GAAG,KAAKC,EAAE,SAI9F/B,EAAU7C,EAAMkE,KACd,kBAAC,IAAD,CACEnC,SAAU/B,EAAM+B,SAChBC,UAAWhC,EAAMgC,UACjB6C,aAAa,EACbC,cAAc,EACdC,iBAAiB,EACjB1D,QAAS,kBAAMyB,EAAa,KAC5BkC,OAAO,OACP,yBAAK9C,UAAU,SACb,4BAAKlC,EAAMiF,OACX,6BACA,2BAAIjF,EAAMkF,UACV,6BACA,8CAAoB,IAAIC,KAAKnF,EAAMoF,WAAWC,sBAC9C,6BACCrF,EAAMsF,MAAQ,yBAAKpD,UAAU,QAAQqD,IAAKvF,EAAMsF,MAAOE,IAAKxF,EAAMiF,QAAY,KAC/E,4BAAQ/C,UAAU,SAASiC,QAAO,sBAAE,sBAAAxE,EAAA,sEAC5BmB,EAAed,EAAMkE,KADO,cAElCpB,EAAa,IAFqB,SAG5BQ,IAH4B,4CAApC,gBAQF,SAMVP,EACE,oCACE,kBAAC,IAAD,CACEhB,SAAUgB,EAAiBhB,SAC3BC,UAAWe,EAAiBf,WAE5B,6BAEE,yBAAKE,UAAU,UACbe,MAAM,KACNC,OAAO,KACPkB,QAAQ,YACRC,KAAK,OACLC,YAAY,MACZC,cAAc,QACdC,eAAe,SAEf,0BAAMC,EAAE,mDAAwD,4BAAQC,GAAG,KAAKC,GAAG,KAAKC,EAAE,SAGhG,kBAAC,IAAD,CACE7C,SAAUgB,EAAiBhB,SAC3BC,UAAWe,EAAiBf,UAC5B6C,aAAa,EACbC,cAAc,EACdC,iBAAiB,EACjB1D,QAAS,kBAAM2B,EAAoB,OACnCgC,OAAO,OACP,yBAAK9C,UAAU,SACb,kBAAC,EAAD,CACEb,QAAS,WACP2B,EAAoB,MACpBM,KAEF9D,SAAUuD,OAMhB,OCzIZ0C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.ae6038a7.chunk.js","sourcesContent":["const API_URL = window.location.hostname === 'localhost' ? 'http://localhost:5000' : 'https://memo-map-mf.herokuapp.com'\r\n\r\nexport async function listLogEntries() {\r\n    const response = await fetch(`${API_URL}/api/logs`);\r\n    return response.json();\r\n}\r\n\r\nexport async function createLogEntry(entry) {\r\n    const apiKey = entry.apiKey;\r\n    delete entry.apiKey;\r\n    const response = await fetch(`${API_URL}/api/logs`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            'X-API-KEY': apiKey,\r\n        },\r\n        body: JSON.stringify(entry),\r\n    });\r\n    let json;\r\n    if (response.headers.get('content-type').includes('text/html')) {\r\n        const message = await response.text();\r\n        json = {\r\n            message,\r\n        };\r\n    } else {\r\n        json = await response.json();\r\n    }\r\n    if (response.ok) {\r\n        return json;\r\n    }\r\n    const error = new Error(json.message);\r\n    error.response = json;\r\n    throw error;\r\n}\r\n\r\nexport async function deleteLogEntry(id) {\r\n    fetch(`${API_URL}/api/logs/${id}`, {\r\n        method: 'DELETE',\r\n    })\r\n        .then(res => res.text()) // or res.json()\r\n        .then(res => console.log(res))\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport { createLogEntry } from '../API'\r\n\r\nconst LogEntryForm = ({ location, onClose }) => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState('')\r\n    const { handleSubmit, register } = useForm();\r\n\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            setLoading(true)\r\n            data.latitude = location.latitude\r\n            data.longitude = location.longitude\r\n            await createLogEntry(data)\r\n            onClose()\r\n        } catch (error) {\r\n            console.error(error)\r\n            setError(error.message)\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form autocomplete=\"off\" onSubmit={handleSubmit(onSubmit)} className=\"entry-form\">\r\n            {error ? <h3 className=\"error\">{error}</h3> : null}\r\n            <label htmlFor=\"apiKey\">API KEY</label>\r\n            <input type=\"password\" name=\"apiKey\" required ref={register} />\r\n            <label htmlFor=\"title\">Title</label>\r\n            <input name=\"title\" required ref={register} />\r\n            <label htmlFor=\"comments\">Comments</label>\r\n            <textarea name=\"comments\" rows={3} ref={register}></textarea>\r\n            <label htmlFor=\"description\">Description</label>\r\n            <input name=\"description\" ref={register} />\r\n            <label htmlFor=\"image\">Image <small>(url)</small></label>\r\n            <input name=\"image\" ref={register} />\r\n            <label htmlFor=\"visitDate\">Visit Date</label>\r\n            <input name=\"visitDate\" type=\"date\" ref={register} required />\r\n            <button disabled={loading}>{loading ? 'Loading...' : 'Create pin'}</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default LogEntryForm;\r\n","import React, { useState, useEffect } from 'react';\nimport ReactMapGL, { Marker, Popup } from 'react-map-gl';\nimport { listLogEntries, deleteLogEntry } from './API'\nimport LogEntryForm from './components/LogEntryForm'\n\nconst App = () => {\n\n  const [logEntries, setLogEntries] = useState([])\n  const [showPopup, setShowPopup] = useState({})\n  const [addEntryLocation, setAddEntryLocation] = useState(null)\n  const [viewport, setViewport] = useState({\n    width: '100vw',\n    height: '100vh',\n    latitude: 40.11,\n    longitude: -100.99,\n    zoom: 4\n  });\n\n  const getEntries = async () => {\n    const logEntries = await listLogEntries()\n    setLogEntries(logEntries)\n  }\n\n  useEffect(() => { //loads only once\n    (async () => {\n      getEntries()\n    })()\n  }, [])\n\n  const showAddMarkerPopup = (event) => {\n    const [longitude, latitude] = event.lngLat\n    setAddEntryLocation({\n      latitude,\n      longitude\n    })\n  }\n\n  return (\n    <ReactMapGL\n      {...viewport}\n      mapStyle=\"mapbox://styles/mapbox/dark-v10\"\n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n      onViewportChange={setViewport}\n      onDblClick={showAddMarkerPopup}\n    >\n      {\n        logEntries.map(entry => (\n          <React.Fragment key={entry._id}>\n            <Marker\n              key={entry._id}\n              latitude={entry.latitude}\n              longitude={entry.longitude}\n            >\n              <div\n                onClick={() => setShowPopup({\n                  [entry._id]: true,\n                })}\n              >\n                <svg className=\"pin yellow\"\n                  width=\"24\"\n                  height=\"24\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                >\n                  <path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\"></path><circle cx=\"12\" cy=\"10\" r=\"3\"></circle></svg>\n              </div>\n            </Marker>\n            {\n              showPopup[entry._id] ? (\n                <Popup\n                  latitude={entry.latitude}\n                  longitude={entry.longitude}\n                  closeButton={true}\n                  closeOnClick={false}\n                  dynamicPosition={true}\n                  onClose={() => setShowPopup({})}\n                  anchor=\"top\" >\n                  <div className=\"popup\">\n                    <h3>{entry.title}</h3>\n                    <hr></hr>\n                    <p>{entry.comments}</p>\n                    <hr></hr>\n                    <small>Visited on: {new Date(entry.visitDate).toLocaleDateString()}</small>\n                    <hr></hr>\n                    {entry.image ? <img className=\"image\" src={entry.image} alt={entry.title} /> : null}\n                    <button className=\"delete\" onClick={async () => {\n                      await deleteLogEntry(entry._id)\n                      setShowPopup({})\n                      await getEntries()\n                    }}>delete pin</button>\n                  </div>\n                </Popup>\n              )\n                : null\n            }\n          </React.Fragment >\n        ))\n      }\n      {\n        addEntryLocation ? (\n          <>\n            <Marker\n              latitude={addEntryLocation.latitude}\n              longitude={addEntryLocation.longitude}\n            >\n              <div\n              >\n                <svg className=\"pin red\"\n                  width=\"24\"\n                  height=\"24\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  strokeWidth=\"1.5\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                >\n                  <path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\"></path><circle cx=\"12\" cy=\"10\" r=\"3\"></circle></svg>\n              </div>\n            </Marker>\n            <Popup\n              latitude={addEntryLocation.latitude}\n              longitude={addEntryLocation.longitude}\n              closeButton={true}\n              closeOnClick={false}\n              dynamicPosition={true}\n              onClose={() => setAddEntryLocation(null)}\n              anchor=\"top\" >\n              <div className=\"popup\">\n                <LogEntryForm\n                  onClose={() => {\n                    setAddEntryLocation(null)\n                    getEntries()\n                  }}\n                  location={addEntryLocation}\n                />\n              </div>\n            </Popup>\n          </>\n        )\n          : null\n      }\n    </ReactMapGL >\n  );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}